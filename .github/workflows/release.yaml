name: Create Release
on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  ci:
    uses: ./.github/workflows/ci.yaml
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-tags: true
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          # Extract version from pyproject.toml using grep/sed (no nix needed)
          VERSION="$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')"
          TAG="v${VERSION}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "Detected version: ${VERSION}"
          echo "Tag will be: ${TAG}"
      - name: Check if tag already exists
        run: |
          TAG="${{ steps.get_version.outputs.tag }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Error: Tag $TAG already exists!"
            echo "Please update the version in pyproject.toml before releasing."
            exit 1
          fi
          echo "Tag $TAG does not exist yet. Proceeding with release."
      - name: Check if version exists on PyPI
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          # Check if version exists on PyPI
          if curl -s "https://pypi.org/pypi/beautysh/$VERSION/json" | grep -q '"name": "beautysh"'; then
            echo "Error: Version $VERSION already exists on PyPI!"
            echo "Please update the version in pyproject.toml before releasing."
            exit 1
          fi
          echo "Version $VERSION does not exist on PyPI yet. Proceeding with release."
  build:
    needs: [ci, validate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/nix
            ~root/.cache/nix
          key: nix-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('flake.lock') }}
          restore-keys: |
            nix-${{ runner.os }}-${{ runner.arch }}-
      - uses: cachix/cachix-action@v16
        with:
          name: beautysh
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Build package
        run: nix develop -c uv build
      - uses: actions/upload-artifact@v5
        with:
          name: python-package-distributions
          path: dist/
  github-release:
    needs: [build, validate]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.PAT }}
      - uses: actions/download-artifact@v5
        with:
          name: python-package-distributions
          path: dist/
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: Release ${{ needs.validate.outputs.tag }}
          generate_release_notes: true
          files: dist/*
          draft: false
          prerelease: false
          token: ${{ secrets.PAT }}
